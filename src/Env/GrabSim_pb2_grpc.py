# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import GrabSim_pb2 as GrabSim__pb2


class GrabSimStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AcquireTypes = channel.unary_unary(
                '/GrabSim.GrabSim/AcquireTypes',
                request_serializer=GrabSim__pb2.NUL.SerializeToString,
                response_deserializer=GrabSim__pb2.TypeList.FromString,
                )
        self.AcquireAvailableMaps = channel.unary_unary(
                '/GrabSim.GrabSim/AcquireAvailableMaps',
                request_serializer=GrabSim__pb2.NUL.SerializeToString,
                response_deserializer=GrabSim__pb2.AvailableMaps.FromString,
                )
        self.AcquireWalkers = channel.unary_unary(
                '/GrabSim.GrabSim/AcquireWalkers',
                request_serializer=GrabSim__pb2.NUL.SerializeToString,
                response_deserializer=GrabSim__pb2.WalkerNames.FromString,
                )
        self.Init = channel.unary_unary(
                '/GrabSim.GrabSim/Init',
                request_serializer=GrabSim__pb2.NUL.SerializeToString,
                response_deserializer=GrabSim__pb2.NUL.FromString,
                )
        self.SetWorld = channel.unary_unary(
                '/GrabSim.GrabSim/SetWorld',
                request_serializer=GrabSim__pb2.BatchMap.SerializeToString,
                response_deserializer=GrabSim__pb2.World.FromString,
                )
        self.AddMaps = channel.unary_unary(
                '/GrabSim.GrabSim/AddMaps',
                request_serializer=GrabSim__pb2.MapList.SerializeToString,
                response_deserializer=GrabSim__pb2.World.FromString,
                )
        self.ObserveAll = channel.unary_unary(
                '/GrabSim.GrabSim/ObserveAll',
                request_serializer=GrabSim__pb2.NUL.SerializeToString,
                response_deserializer=GrabSim__pb2.World.FromString,
                )
        self.Reset = channel.unary_unary(
                '/GrabSim.GrabSim/Reset',
                request_serializer=GrabSim__pb2.ResetParams.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.MakeObjects = channel.unary_unary(
                '/GrabSim.GrabSim/MakeObjects',
                request_serializer=GrabSim__pb2.ObjectList.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.GetHandGesture = channel.unary_unary(
                '/GrabSim.GrabSim/GetHandGesture',
                request_serializer=GrabSim__pb2.HandGestureParams.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.AddObjects = channel.unary_unary(
                '/GrabSim.GrabSim/AddObjects',
                request_serializer=GrabSim__pb2.ObjectList.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.RemoveObjects = channel.unary_unary(
                '/GrabSim.GrabSim/RemoveObjects',
                request_serializer=GrabSim__pb2.RemoveList.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.CleanObjects = channel.unary_unary(
                '/GrabSim.GrabSim/CleanObjects',
                request_serializer=GrabSim__pb2.SceneID.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.AddAnchors = channel.unary_unary(
                '/GrabSim.GrabSim/AddAnchors',
                request_serializer=GrabSim__pb2.AnchorList.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.Observe = channel.unary_unary(
                '/GrabSim.GrabSim/Observe',
                request_serializer=GrabSim__pb2.SceneID.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.Do = channel.unary_unary(
                '/GrabSim.GrabSim/Do',
                request_serializer=GrabSim__pb2.Action.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.SetLidar = channel.unary_unary(
                '/GrabSim.GrabSim/SetLidar',
                request_serializer=GrabSim__pb2.LidarParams.SerializeToString,
                response_deserializer=GrabSim__pb2.LidarParams.FromString,
                )
        self.MoveHand = channel.unary_unary(
                '/GrabSim.GrabSim/MoveHand',
                request_serializer=GrabSim__pb2.HandTarget.SerializeToString,
                response_deserializer=GrabSim__pb2.ArmSequence.FromString,
                )
        self.Capture = channel.unary_unary(
                '/GrabSim.GrabSim/Capture',
                request_serializer=GrabSim__pb2.CameraList.SerializeToString,
                response_deserializer=GrabSim__pb2.CameraData.FromString,
                )
        self.AddObstacles = channel.unary_unary(
                '/GrabSim.GrabSim/AddObstacles',
                request_serializer=GrabSim__pb2.ObstacleList.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.SetMovement = channel.unary_unary(
                '/GrabSim.GrabSim/SetMovement',
                request_serializer=GrabSim__pb2.MovementList.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.GetAction = channel.unary_unary(
                '/GrabSim.GrabSim/GetAction',
                request_serializer=GrabSim__pb2.Scene.SerializeToString,
                response_deserializer=GrabSim__pb2.ActionList.FromString,
                )
        self.AddWalker = channel.unary_unary(
                '/GrabSim.GrabSim/AddWalker',
                request_serializer=GrabSim__pb2.WalkerList.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.ControlWalkers = channel.unary_unary(
                '/GrabSim.GrabSim/ControlWalkers',
                request_serializer=GrabSim__pb2.WalkerControls.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.RemoveWalkers = channel.unary_unary(
                '/GrabSim.GrabSim/RemoveWalkers',
                request_serializer=GrabSim__pb2.RemoveList.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.CleanWalkers = channel.unary_unary(
                '/GrabSim.GrabSim/CleanWalkers',
                request_serializer=GrabSim__pb2.SceneID.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.ControlRobot = channel.unary_unary(
                '/GrabSim.GrabSim/ControlRobot',
                request_serializer=GrabSim__pb2.ControlInfo.SerializeToString,
                response_deserializer=GrabSim__pb2.Scene.FromString,
                )
        self.GetActuatorRanges = channel.unary_unary(
                '/GrabSim.GrabSim/GetActuatorRanges',
                request_serializer=GrabSim__pb2.SceneID.SerializeToString,
                response_deserializer=GrabSim__pb2.ActuatorList.FromString,
                )
        self.GetSensorDatas = channel.unary_unary(
                '/GrabSim.GrabSim/GetSensorDatas',
                request_serializer=GrabSim__pb2.SceneID.SerializeToString,
                response_deserializer=GrabSim__pb2.SensorList.FromString,
                )
        self.GetIKControlInfos = channel.unary_unary(
                '/GrabSim.GrabSim/GetIKControlInfos',
                request_serializer=GrabSim__pb2.HandPostureInfos.SerializeToString,
                response_deserializer=GrabSim__pb2.IKControlInfos.FromString,
                )
        self.ChangeCamera = channel.unary_unary(
                '/GrabSim.GrabSim/ChangeCamera',
                request_serializer=GrabSim__pb2.CameraInfo.SerializeToString,
                response_deserializer=GrabSim__pb2.ChangeCameraResult.FromString,
                )
        self.SetLightIntensity = channel.unary_unary(
                '/GrabSim.GrabSim/SetLightIntensity',
                request_serializer=GrabSim__pb2.FloatValue.SerializeToString,
                response_deserializer=GrabSim__pb2.NUL.FromString,
                )
        self.SetEnableEndPointCtrl = channel.unary_unary(
                '/GrabSim.GrabSim/SetEnableEndPointCtrl',
                request_serializer=GrabSim__pb2.EnableEndPointCtrl.SerializeToString,
                response_deserializer=GrabSim__pb2.NUL.FromString,
                )
        self.SetEndPointPosition = channel.unary_unary(
                '/GrabSim.GrabSim/SetEndPointPosition',
                request_serializer=GrabSim__pb2.EndPointPosition.SerializeToString,
                response_deserializer=GrabSim__pb2.NUL.FromString,
                )
        self.SetObjectJointAngle = channel.unary_unary(
                '/GrabSim.GrabSim/SetObjectJointAngle',
                request_serializer=GrabSim__pb2.ObjectJointCtrl.SerializeToString,
                response_deserializer=GrabSim__pb2.NUL.FromString,
                )


class GrabSimServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AcquireTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcquireAvailableMaps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcquireWalkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWorld(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMaps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObserveAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeObjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHandGesture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddObjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveObjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanObjects(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAnchors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Observe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Do(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLidar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveHand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Capture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddObstacles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMovement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddWalker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ControlWalkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveWalkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanWalkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ControlRobot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActuatorRanges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSensorDatas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIKControlInfos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeCamera(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLightIntensity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEnableEndPointCtrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEndPointPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetObjectJointAngle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrabSimServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AcquireTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireTypes,
                    request_deserializer=GrabSim__pb2.NUL.FromString,
                    response_serializer=GrabSim__pb2.TypeList.SerializeToString,
            ),
            'AcquireAvailableMaps': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireAvailableMaps,
                    request_deserializer=GrabSim__pb2.NUL.FromString,
                    response_serializer=GrabSim__pb2.AvailableMaps.SerializeToString,
            ),
            'AcquireWalkers': grpc.unary_unary_rpc_method_handler(
                    servicer.AcquireWalkers,
                    request_deserializer=GrabSim__pb2.NUL.FromString,
                    response_serializer=GrabSim__pb2.WalkerNames.SerializeToString,
            ),
            'Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=GrabSim__pb2.NUL.FromString,
                    response_serializer=GrabSim__pb2.NUL.SerializeToString,
            ),
            'SetWorld': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWorld,
                    request_deserializer=GrabSim__pb2.BatchMap.FromString,
                    response_serializer=GrabSim__pb2.World.SerializeToString,
            ),
            'AddMaps': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMaps,
                    request_deserializer=GrabSim__pb2.MapList.FromString,
                    response_serializer=GrabSim__pb2.World.SerializeToString,
            ),
            'ObserveAll': grpc.unary_unary_rpc_method_handler(
                    servicer.ObserveAll,
                    request_deserializer=GrabSim__pb2.NUL.FromString,
                    response_serializer=GrabSim__pb2.World.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=GrabSim__pb2.ResetParams.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'MakeObjects': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeObjects,
                    request_deserializer=GrabSim__pb2.ObjectList.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'GetHandGesture': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHandGesture,
                    request_deserializer=GrabSim__pb2.HandGestureParams.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'AddObjects': grpc.unary_unary_rpc_method_handler(
                    servicer.AddObjects,
                    request_deserializer=GrabSim__pb2.ObjectList.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'RemoveObjects': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveObjects,
                    request_deserializer=GrabSim__pb2.RemoveList.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'CleanObjects': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanObjects,
                    request_deserializer=GrabSim__pb2.SceneID.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'AddAnchors': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAnchors,
                    request_deserializer=GrabSim__pb2.AnchorList.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'Observe': grpc.unary_unary_rpc_method_handler(
                    servicer.Observe,
                    request_deserializer=GrabSim__pb2.SceneID.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'Do': grpc.unary_unary_rpc_method_handler(
                    servicer.Do,
                    request_deserializer=GrabSim__pb2.Action.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'SetLidar': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLidar,
                    request_deserializer=GrabSim__pb2.LidarParams.FromString,
                    response_serializer=GrabSim__pb2.LidarParams.SerializeToString,
            ),
            'MoveHand': grpc.unary_unary_rpc_method_handler(
                    servicer.MoveHand,
                    request_deserializer=GrabSim__pb2.HandTarget.FromString,
                    response_serializer=GrabSim__pb2.ArmSequence.SerializeToString,
            ),
            'Capture': grpc.unary_unary_rpc_method_handler(
                    servicer.Capture,
                    request_deserializer=GrabSim__pb2.CameraList.FromString,
                    response_serializer=GrabSim__pb2.CameraData.SerializeToString,
            ),
            'AddObstacles': grpc.unary_unary_rpc_method_handler(
                    servicer.AddObstacles,
                    request_deserializer=GrabSim__pb2.ObstacleList.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'SetMovement': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMovement,
                    request_deserializer=GrabSim__pb2.MovementList.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'GetAction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAction,
                    request_deserializer=GrabSim__pb2.Scene.FromString,
                    response_serializer=GrabSim__pb2.ActionList.SerializeToString,
            ),
            'AddWalker': grpc.unary_unary_rpc_method_handler(
                    servicer.AddWalker,
                    request_deserializer=GrabSim__pb2.WalkerList.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'ControlWalkers': grpc.unary_unary_rpc_method_handler(
                    servicer.ControlWalkers,
                    request_deserializer=GrabSim__pb2.WalkerControls.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'RemoveWalkers': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveWalkers,
                    request_deserializer=GrabSim__pb2.RemoveList.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'CleanWalkers': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanWalkers,
                    request_deserializer=GrabSim__pb2.SceneID.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'ControlRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.ControlRobot,
                    request_deserializer=GrabSim__pb2.ControlInfo.FromString,
                    response_serializer=GrabSim__pb2.Scene.SerializeToString,
            ),
            'GetActuatorRanges': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActuatorRanges,
                    request_deserializer=GrabSim__pb2.SceneID.FromString,
                    response_serializer=GrabSim__pb2.ActuatorList.SerializeToString,
            ),
            'GetSensorDatas': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSensorDatas,
                    request_deserializer=GrabSim__pb2.SceneID.FromString,
                    response_serializer=GrabSim__pb2.SensorList.SerializeToString,
            ),
            'GetIKControlInfos': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIKControlInfos,
                    request_deserializer=GrabSim__pb2.HandPostureInfos.FromString,
                    response_serializer=GrabSim__pb2.IKControlInfos.SerializeToString,
            ),
            'ChangeCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeCamera,
                    request_deserializer=GrabSim__pb2.CameraInfo.FromString,
                    response_serializer=GrabSim__pb2.ChangeCameraResult.SerializeToString,
            ),
            'SetLightIntensity': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLightIntensity,
                    request_deserializer=GrabSim__pb2.FloatValue.FromString,
                    response_serializer=GrabSim__pb2.NUL.SerializeToString,
            ),
            'SetEnableEndPointCtrl': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEnableEndPointCtrl,
                    request_deserializer=GrabSim__pb2.EnableEndPointCtrl.FromString,
                    response_serializer=GrabSim__pb2.NUL.SerializeToString,
            ),
            'SetEndPointPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEndPointPosition,
                    request_deserializer=GrabSim__pb2.EndPointPosition.FromString,
                    response_serializer=GrabSim__pb2.NUL.SerializeToString,
            ),
            'SetObjectJointAngle': grpc.unary_unary_rpc_method_handler(
                    servicer.SetObjectJointAngle,
                    request_deserializer=GrabSim__pb2.ObjectJointCtrl.FromString,
                    response_serializer=GrabSim__pb2.NUL.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GrabSim.GrabSim', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GrabSim(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AcquireTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/AcquireTypes',
            GrabSim__pb2.NUL.SerializeToString,
            GrabSim__pb2.TypeList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcquireAvailableMaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/AcquireAvailableMaps',
            GrabSim__pb2.NUL.SerializeToString,
            GrabSim__pb2.AvailableMaps.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcquireWalkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/AcquireWalkers',
            GrabSim__pb2.NUL.SerializeToString,
            GrabSim__pb2.WalkerNames.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/Init',
            GrabSim__pb2.NUL.SerializeToString,
            GrabSim__pb2.NUL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetWorld(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/SetWorld',
            GrabSim__pb2.BatchMap.SerializeToString,
            GrabSim__pb2.World.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/AddMaps',
            GrabSim__pb2.MapList.SerializeToString,
            GrabSim__pb2.World.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObserveAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/ObserveAll',
            GrabSim__pb2.NUL.SerializeToString,
            GrabSim__pb2.World.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/Reset',
            GrabSim__pb2.ResetParams.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeObjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/MakeObjects',
            GrabSim__pb2.ObjectList.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHandGesture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/GetHandGesture',
            GrabSim__pb2.HandGestureParams.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddObjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/AddObjects',
            GrabSim__pb2.ObjectList.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveObjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/RemoveObjects',
            GrabSim__pb2.RemoveList.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CleanObjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/CleanObjects',
            GrabSim__pb2.SceneID.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAnchors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/AddAnchors',
            GrabSim__pb2.AnchorList.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Observe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/Observe',
            GrabSim__pb2.SceneID.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Do(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/Do',
            GrabSim__pb2.Action.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLidar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/SetLidar',
            GrabSim__pb2.LidarParams.SerializeToString,
            GrabSim__pb2.LidarParams.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MoveHand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/MoveHand',
            GrabSim__pb2.HandTarget.SerializeToString,
            GrabSim__pb2.ArmSequence.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Capture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/Capture',
            GrabSim__pb2.CameraList.SerializeToString,
            GrabSim__pb2.CameraData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddObstacles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/AddObstacles',
            GrabSim__pb2.ObstacleList.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMovement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/SetMovement',
            GrabSim__pb2.MovementList.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/GetAction',
            GrabSim__pb2.Scene.SerializeToString,
            GrabSim__pb2.ActionList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddWalker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/AddWalker',
            GrabSim__pb2.WalkerList.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ControlWalkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/ControlWalkers',
            GrabSim__pb2.WalkerControls.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveWalkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/RemoveWalkers',
            GrabSim__pb2.RemoveList.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CleanWalkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/CleanWalkers',
            GrabSim__pb2.SceneID.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ControlRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/ControlRobot',
            GrabSim__pb2.ControlInfo.SerializeToString,
            GrabSim__pb2.Scene.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActuatorRanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/GetActuatorRanges',
            GrabSim__pb2.SceneID.SerializeToString,
            GrabSim__pb2.ActuatorList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSensorDatas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/GetSensorDatas',
            GrabSim__pb2.SceneID.SerializeToString,
            GrabSim__pb2.SensorList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIKControlInfos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/GetIKControlInfos',
            GrabSim__pb2.HandPostureInfos.SerializeToString,
            GrabSim__pb2.IKControlInfos.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/ChangeCamera',
            GrabSim__pb2.CameraInfo.SerializeToString,
            GrabSim__pb2.ChangeCameraResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLightIntensity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/SetLightIntensity',
            GrabSim__pb2.FloatValue.SerializeToString,
            GrabSim__pb2.NUL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEnableEndPointCtrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/SetEnableEndPointCtrl',
            GrabSim__pb2.EnableEndPointCtrl.SerializeToString,
            GrabSim__pb2.NUL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEndPointPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/SetEndPointPosition',
            GrabSim__pb2.EndPointPosition.SerializeToString,
            GrabSim__pb2.NUL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetObjectJointAngle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrabSim.GrabSim/SetObjectJointAngle',
            GrabSim__pb2.ObjectJointCtrl.SerializeToString,
            GrabSim__pb2.NUL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
